// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"GoBase/webook/internal/repository"
	"GoBase/webook/internal/repository/cache"
	"GoBase/webook/internal/repository/dao"
	"GoBase/webook/internal/service"
	"GoBase/webook/internal/web"
	"GoBase/webook/ioc"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	v := ioc.InitMiddlewares(cmdable)
	db := ioc.InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeRedisCache := cache.NewCodeRedisCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeRedisCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService)
	articleDAO := dao.NewGORMArticleDAO(db)
	articleRepository := repository.NewArticleRepository(articleDAO)
	articleService := service.NewArticleService(articleRepository)
	loggerV1 := ioc.InitLogger()
	articleHandler := web.NewArticleHandler(articleService, loggerV1)
	engine := ioc.InitWebServer(v, userHandler, articleHandler)
	return engine
}

func InitArticleHandler() *web.ArticleHandler {
	db := ioc.InitDB()
	articleDAO := dao.NewGORMArticleDAO(db)
	articleRepository := repository.NewArticleRepository(articleDAO)
	articleService := service.NewArticleService(articleRepository)
	loggerV1 := ioc.InitLogger()
	articleHandler := web.NewArticleHandler(articleService, loggerV1)
	return articleHandler
}

func InitUserSvc() service.UserService {
	db := ioc.InitDB()
	userDAO := dao.NewUserDAO(db)
	cmdable := ioc.InitRedis()
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	return userService
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitLogger, ioc.InitDB)

var userSvcProvider = wire.NewSet(dao.NewUserDAO, cache.NewUserCache, cache.NewCodeRedisCache, repository.NewUserRepository, repository.NewCodeRepository, service.NewUserService, service.NewCodeService, ioc.InitSMSService, web.NewUserHandler)
